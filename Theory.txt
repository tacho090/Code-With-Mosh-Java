package com.pablomora;

import java.awt.*;
import java.text.NumberFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Scanner;

public class Main {
// bytecode is .class file
//    bytecode is then executed via Java RunTime Environment(JRE) and
//    then translated to Native Code which can be read on Windows machines

//    Primitive types
//    Type  Bytes   Range
//    byte  1   [-128, 127]
//    short 2   [-32k, 32k]
//    int   4   [-2B, 2B]
//    long  8
//    float 4
//    double    8
//    char  2   A,B,C
//    boolean   1   true/false
    public static void main(String[] args) {
	    byte  age = 30;
//	    Date is a Reference type variable
        Date now = new Date();
        System.out.println(now);
//    long variable add L to the end
	    long viewsCount = 2_123_456_789L;
	    float price = 10.99F;
	    char letter = 'A';
	    boolean isEligible = true;
        System.out.println(age);

//    Point package
//    reference type holds address for variable
//    both points reference the same object (point1)
        Point point1 = new Point(1, 1);
        Point point2 = point1;
        point1.x = 2;
        System.out.println(point2);

//    String
        String exclamation = "!!!???";
        String message = String.format("   Hello world!%s", exclamation);
        System.out.println(message.endsWith("??"));
        System.out.println(message.startsWith("??"));
        System.out.println(message.length());
        System.out.println(message.indexOf("w"));
        System.out.println(message.replace("!", "****"));
        System.out.println(message);
        System.out.println(message.toLowerCase());
        System.out.println(message.toUpperCase());
        System.out.println(message.trim());

//        Parameters:  placeholders for values for methods
//        Arguments: actual values that are passed to the methods

//        Escape characters
        String file = "c:\\Windows\\...";
        file = "c:\nWindows\\...";
        file = "c:\tWindows\\...";
        System.out.println(file);

//        Arrays
        int [] numbers = new int[5];
        numbers[0] = 1;
        numbers [1] = 2;
//        will print location in memory
        System.out.println(numbers);
//      will convert Array which is stored in memory into a string representation
        System.out.println(Arrays.toString(numbers));

//        more efficient way of initializing an array
        int[] numArray = { 2, 3, 4, 3, 5};
        Arrays.sort(numArray);
        System.out.println(numArray.length);
        System.out.println(Arrays.toString(numArray));

//        two dimensional arrays
        int [][] twoArr = new int[2][3];
        twoArr[0][1] = 1;
//        use this function to print a two dimensional array
        System.out.println(Arrays.deepToString(twoArr));

//        three dimensional array
        int [][][] threeArr= new int[2][3][3];
        threeArr[1][0][0] = 1;
        System.out.println(Arrays.deepToString(threeArr));

//        two dimensional array with curly braces
        int [][] twoArray = {{1,2,3},{4,5,6}};
        System.out.println(Arrays.deepToString(twoArray));

//        Constants
        final float PI = 3.14F;

//        Implicit casting
//        byte > short > int > long > float > double
        double x = 1.1;
        int y = (int)x + 2; // this is implicit casting
        String str = "1";
        System.out.println(Integer.parseInt(str));
        System.out.println(y);

//        Math class
        System.out.println(Math.ceil(1.1F));
        System.out.println(Math.round(1.1F));
        System.out.println(Math.floor(1.1F));
        System.out.println(Math.max(1, 3));
        int result = (int)Math.round(Math.random() * 100);
        System.out.println(result);
        System.out.println(Math.random() * 100);

//        NumberFormat Class
        NumberFormat currency = NumberFormat.getCurrencyInstance();
        NumberFormat percent = NumberFormat.getPercentInstance();
        System.out.println(currency.format(1234567.891));
        System.out.println(percent.format(0.1));

//      Reading user input
//        Scanner scanner = new Scanner(System.in);
//        System.out.print("Age: ");
//        String scannerByte = scanner.nextLine().trim();
//        System.out.println("You are " + scannerByte);

//        Logical operators
        byte temperature = 32;
        boolean isWarm = temperature > 20 && temperature < 30;
        System.out.println(isWarm);

//        Symplify if statements
        int income = 120_000;
        boolean hasHighIncome = (income > 100_000);

//        Run a project as a jar file
//        Go to File
//        Project Structure
//        Select Artifacts
//        Generate jar file
//        Select Main class as initial class
//        Ok, then click on Build
//        Build Artifacts
//        On out folder go to jar file
//        right click, open on terminal
//        java -jar helloWorld.jar
//
//      Move code to new Class by right clicking a function and then click on Refactor > Move members...
//        All class content will be moved to the new class
//        Shortcut F6 to create new class from existing method

//        Method overload is useful when programming a function with the same name and one takes different params than the other one
//        Programmers differentiate both methods by the amount of params that are passed to these methods

//      Static fields belong to the class, not to the instances of the class. This means that every instance of
//        the class access to this static field

//        hashCode
//        hashCode() is a hashCode that corresponds to a location in memory
//        this value is then mapped to a numeric value called a hash

//        Access Modifiers
//        public
//        private
//        protected: public only in their own package
    }
}

Hashcode is mapped from an address in memory to a numeric value

Protected classes are accesible from child classes on different packages

Overriding methods:
	Add @Override annotation
	We are overriding the toString method. For example it overrides a method with the same signature
Method overloading:
	Declare a method multiple times but with different signatures
Casting meaning
	Also known as type conversion, it is used in computer programming to ensure variables are correctly processed by a function. An example of typecasting is converting an integer to a string.
Polymorphism
	Every child class overrides a parent class method.
Abstract classes
	Abstract object implementations that are generally parent classes that are not accessed directly, but by the implementation of their methods inside the  child classes
	We cannot instantiate this class, we can only extend it.
Final classes
	Declares a final implementation of classes. This is mainly used when the programmer doesn't want to extend the class anymore.
	This keyword may also be applied to methods, so that no more overrides can be applied to them.
Deep Inheritance hierarchy
	Not advisable. Any changes to a parent class implies a modification of its child classes
	You end up polluting inheritance hierarchies. It must be two levels. Classes are decoupled and can evolve independently.
Inheritance Quiz:
	a. How can we have Class A inherit from Class B?
	class classA extends class B

	b.What will be printed on the console and why?
	var point1 = new Point(1, 2);
	var point2 = new Point(1, 2);
	System.out.println(point1.equals(point2));

	false, because both have different hashCodes and 
	reference two different locations in memory
	
	c. What does hashCode() method of the Object class return?
	An address in meory of the variable's location mapped as a numeric value.

	d. What is a default constructor?
	Default constructor automatically generated by the compiler in the abscense 
	of any programmer-defined constructors. It has no parameters.
	
	e.How can we add a constructor to the Customer class?
	public Customer(String name){}

	f.What is the *super* keyword?
	Super keywords call methods from the parent class. 
	It's a reference to a base or parent class. 
	In contrast, this keyword returns a reference to the current object

	g.What is the difference between private and protected access modifiers?
	Private means the method or variable is only available to the class.
	Protected members are inherited and accesible by child(derived) classes.
	Private members are not.

	h. How accessible is a field or method if it's declared without an access modifier?
	It's public by default, but private outside of the package.

	i. What is method overriding? How is it different from method overloading?
	Method overriding means changing the implementation of an inherited method in a subclass.
	For example, we can override the equals() or hashCode() methods of an Object class.
	Method overloading means declaring a method with different signatures(different
	number, type and order of parameters).

	j. What is the benefit of applying the @Override annotation when overriding a method?
	Applies Object Oriented Programming principle of polymorphism by reusing the same method ut expecting a different behaviour from it based on the class where the method's located.
	It signals the Java Compiler that we're overriding a method in the base class and
	this helps the compiler check our code for correctness. It will ensure the signature
	of the method in the subclass matches the one declared in a base class. Also, if we
	removed this method from the base class, the compiler will let us know and we can
	remove the method in the subclass as well.

	k. The Customer class inherits from the User class. Can we pass a Customer object to this method? Why?
	Yes, because it's the parent class. In this case, the customer object will get
	automatically upcast (meaning it'll be converted to its base type - User). If we need to 
	work with members of the customer object in this method, we need to explicitly
	downcast it by prefixing th eobject with (Customer).

	l. What is the usage of the instanceof operator?
	Returns a boolean value which describes if an object is an instance of a class.

	m. What are the 4 principles of OOP?
	Abstraction: reducing the complexity by hiding unnecesary details.
	Polymorphism: allows an object to take many forms and behave differently.
	Encapsulation: bundling the data and operations on the data inside a single unit(class).
	Inheritance: reuse code by passing methods and data from parent or base classes to child classes.

	n. When do we use abstract classes?
	It is a partially implemented class.
	When we want to forbid the instantiation of a class and only allow its extension.

	o. Can we have an abstract class without any abstract methods?
	Yes. If we mark a method as abstract, the class should be abstract as well.

	p. When do we use final classes?
	When we don't want for that class to be extended anywhere else in the code.
	Final classes cannot be inherited.

	q. What is the diamond problem?
	The diamond problem happens in languages that support multiple inheritance. If
	two classes (B, C) derive from A and are also the parents of another class (D),
	we see a diamond. If the top class(A) declares a method (eg toString) and its children
	(B and C) override this method, it's not clear which implementation will be inherited
	by D.

	r.Does Java support multiple inheritance?
	No.
	
